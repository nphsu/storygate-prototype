rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
    	return request.auth != null
    }
    function isOwner(resourceOwnerUid) {
    	return isAuthenticated()
              && request.auth.uid == resourceOwnerUid
    }
    function isUndefined(data, field) {
      return !data.keys().hasAll([field]);
    }
    function hasOnly(fields) {
      return request.resource.data.keys().hasOnly(fields)
    }
    function changesOnly(fields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields)
    }
    function notHasAccount() {
      return !exists(/databases/$(database)/documents/accounts/$(request.auth.uid))
    }

    match /accounts/{accountId} {
      allow get: if isOwner(accountId);
      allow create: if isOwner(accountId)
                          && hasOnly(["createDatetime"]);
    }
    match /invitations/{invitationId} {
      allow get;
      allow list: if request.auth.uid == resource.data.hostUid;
      allow create: if isAuthenticated()
                        && hasOnly(["hostUid", "createDatetime", "updateDatetime", "expireDatetime"])
      allow update: if isAuthenticated()
                        && isUndefined(resource.data, "inviteeUid")
                        && changesOnly(["inviteeUid", "updateDatetime"])
                        && request.resource.data.inviteeUid == request.auth.uid
                        && request.resource.data.updateDatetime > resource.data.updateDatetime
                        && notHasAccount();
    }
    match /metrics/{pageId} {
      allow update; // FIXME
    }
    match /pageCaptions/{pageId} {
      allow read;
      allow update: if isOwner(resource.data.ownerUid)
                        && changesOnly(["username", "title", "introduction"]);
    }
    match /persons/{pageId} {
      allow read;
      allow update: if isOwner(resource.data.ownerUid)
                        && changesOnly(["sections","profileImgUrl", "bgImgUrl", "themeColor"]);
    }
    match /inquiries/{inquiryId} {
      allow create;
    }

    match /{document=**} {
    	allow read, write: if isAuthenticated()
                              && isUndefined(request.auth.token, "admin") == false
                              && request.auth.token.admin;
    }
  }
}
